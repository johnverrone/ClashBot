// Code generated by counterfeiter. DO NOT EDIT.
package clashfakes

import (
	"sync"

	"github.com/johnverrone/clashbot/pkg/clash"
)

type FakeClient struct {
	CheckForAttackUpdatesStub        func(*clash.ClanWarMember, *clash.LockingCounter) string
	checkForAttackUpdatesMutex       sync.RWMutex
	checkForAttackUpdatesArgsForCall []struct {
		arg1 *clash.ClanWarMember
		arg2 *clash.LockingCounter
	}
	checkForAttackUpdatesReturns struct {
		result1 string
	}
	checkForAttackUpdatesReturnsOnCall map[int]struct {
		result1 string
	}
	GetClanStub        func() (clash.Clan, error)
	getClanMutex       sync.RWMutex
	getClanArgsForCall []struct {
	}
	getClanReturns struct {
		result1 clash.Clan
		result2 error
	}
	getClanReturnsOnCall map[int]struct {
		result1 clash.Clan
		result2 error
	}
	GetOpponentMapPositionStub        func(string) int
	getOpponentMapPositionMutex       sync.RWMutex
	getOpponentMapPositionArgsForCall []struct {
		arg1 string
	}
	getOpponentMapPositionReturns struct {
		result1 int
	}
	getOpponentMapPositionReturnsOnCall map[int]struct {
		result1 int
	}
	GetWarStub        func() (clash.CurrentWar, error)
	getWarMutex       sync.RWMutex
	getWarArgsForCall []struct {
	}
	getWarReturns struct {
		result1 clash.CurrentWar
		result2 error
	}
	getWarReturnsOnCall map[int]struct {
		result1 clash.CurrentWar
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CheckForAttackUpdates(arg1 *clash.ClanWarMember, arg2 *clash.LockingCounter) string {
	fake.checkForAttackUpdatesMutex.Lock()
	ret, specificReturn := fake.checkForAttackUpdatesReturnsOnCall[len(fake.checkForAttackUpdatesArgsForCall)]
	fake.checkForAttackUpdatesArgsForCall = append(fake.checkForAttackUpdatesArgsForCall, struct {
		arg1 *clash.ClanWarMember
		arg2 *clash.LockingCounter
	}{arg1, arg2})
	fake.recordInvocation("CheckForAttackUpdates", []interface{}{arg1, arg2})
	fake.checkForAttackUpdatesMutex.Unlock()
	if fake.CheckForAttackUpdatesStub != nil {
		return fake.CheckForAttackUpdatesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkForAttackUpdatesReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CheckForAttackUpdatesCallCount() int {
	fake.checkForAttackUpdatesMutex.RLock()
	defer fake.checkForAttackUpdatesMutex.RUnlock()
	return len(fake.checkForAttackUpdatesArgsForCall)
}

func (fake *FakeClient) CheckForAttackUpdatesCalls(stub func(*clash.ClanWarMember, *clash.LockingCounter) string) {
	fake.checkForAttackUpdatesMutex.Lock()
	defer fake.checkForAttackUpdatesMutex.Unlock()
	fake.CheckForAttackUpdatesStub = stub
}

func (fake *FakeClient) CheckForAttackUpdatesArgsForCall(i int) (*clash.ClanWarMember, *clash.LockingCounter) {
	fake.checkForAttackUpdatesMutex.RLock()
	defer fake.checkForAttackUpdatesMutex.RUnlock()
	argsForCall := fake.checkForAttackUpdatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) CheckForAttackUpdatesReturns(result1 string) {
	fake.checkForAttackUpdatesMutex.Lock()
	defer fake.checkForAttackUpdatesMutex.Unlock()
	fake.CheckForAttackUpdatesStub = nil
	fake.checkForAttackUpdatesReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) CheckForAttackUpdatesReturnsOnCall(i int, result1 string) {
	fake.checkForAttackUpdatesMutex.Lock()
	defer fake.checkForAttackUpdatesMutex.Unlock()
	fake.CheckForAttackUpdatesStub = nil
	if fake.checkForAttackUpdatesReturnsOnCall == nil {
		fake.checkForAttackUpdatesReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.checkForAttackUpdatesReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) GetClan() (clash.Clan, error) {
	fake.getClanMutex.Lock()
	ret, specificReturn := fake.getClanReturnsOnCall[len(fake.getClanArgsForCall)]
	fake.getClanArgsForCall = append(fake.getClanArgsForCall, struct {
	}{})
	fake.recordInvocation("GetClan", []interface{}{})
	fake.getClanMutex.Unlock()
	if fake.GetClanStub != nil {
		return fake.GetClanStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getClanReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetClanCallCount() int {
	fake.getClanMutex.RLock()
	defer fake.getClanMutex.RUnlock()
	return len(fake.getClanArgsForCall)
}

func (fake *FakeClient) GetClanCalls(stub func() (clash.Clan, error)) {
	fake.getClanMutex.Lock()
	defer fake.getClanMutex.Unlock()
	fake.GetClanStub = stub
}

func (fake *FakeClient) GetClanReturns(result1 clash.Clan, result2 error) {
	fake.getClanMutex.Lock()
	defer fake.getClanMutex.Unlock()
	fake.GetClanStub = nil
	fake.getClanReturns = struct {
		result1 clash.Clan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetClanReturnsOnCall(i int, result1 clash.Clan, result2 error) {
	fake.getClanMutex.Lock()
	defer fake.getClanMutex.Unlock()
	fake.GetClanStub = nil
	if fake.getClanReturnsOnCall == nil {
		fake.getClanReturnsOnCall = make(map[int]struct {
			result1 clash.Clan
			result2 error
		})
	}
	fake.getClanReturnsOnCall[i] = struct {
		result1 clash.Clan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetOpponentMapPosition(arg1 string) int {
	fake.getOpponentMapPositionMutex.Lock()
	ret, specificReturn := fake.getOpponentMapPositionReturnsOnCall[len(fake.getOpponentMapPositionArgsForCall)]
	fake.getOpponentMapPositionArgsForCall = append(fake.getOpponentMapPositionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOpponentMapPosition", []interface{}{arg1})
	fake.getOpponentMapPositionMutex.Unlock()
	if fake.GetOpponentMapPositionStub != nil {
		return fake.GetOpponentMapPositionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getOpponentMapPositionReturns
	return fakeReturns.result1
}

func (fake *FakeClient) GetOpponentMapPositionCallCount() int {
	fake.getOpponentMapPositionMutex.RLock()
	defer fake.getOpponentMapPositionMutex.RUnlock()
	return len(fake.getOpponentMapPositionArgsForCall)
}

func (fake *FakeClient) GetOpponentMapPositionCalls(stub func(string) int) {
	fake.getOpponentMapPositionMutex.Lock()
	defer fake.getOpponentMapPositionMutex.Unlock()
	fake.GetOpponentMapPositionStub = stub
}

func (fake *FakeClient) GetOpponentMapPositionArgsForCall(i int) string {
	fake.getOpponentMapPositionMutex.RLock()
	defer fake.getOpponentMapPositionMutex.RUnlock()
	argsForCall := fake.getOpponentMapPositionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetOpponentMapPositionReturns(result1 int) {
	fake.getOpponentMapPositionMutex.Lock()
	defer fake.getOpponentMapPositionMutex.Unlock()
	fake.GetOpponentMapPositionStub = nil
	fake.getOpponentMapPositionReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeClient) GetOpponentMapPositionReturnsOnCall(i int, result1 int) {
	fake.getOpponentMapPositionMutex.Lock()
	defer fake.getOpponentMapPositionMutex.Unlock()
	fake.GetOpponentMapPositionStub = nil
	if fake.getOpponentMapPositionReturnsOnCall == nil {
		fake.getOpponentMapPositionReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getOpponentMapPositionReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeClient) GetWar() (clash.CurrentWar, error) {
	fake.getWarMutex.Lock()
	ret, specificReturn := fake.getWarReturnsOnCall[len(fake.getWarArgsForCall)]
	fake.getWarArgsForCall = append(fake.getWarArgsForCall, struct {
	}{})
	fake.recordInvocation("GetWar", []interface{}{})
	fake.getWarMutex.Unlock()
	if fake.GetWarStub != nil {
		return fake.GetWarStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getWarReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetWarCallCount() int {
	fake.getWarMutex.RLock()
	defer fake.getWarMutex.RUnlock()
	return len(fake.getWarArgsForCall)
}

func (fake *FakeClient) GetWarCalls(stub func() (clash.CurrentWar, error)) {
	fake.getWarMutex.Lock()
	defer fake.getWarMutex.Unlock()
	fake.GetWarStub = stub
}

func (fake *FakeClient) GetWarReturns(result1 clash.CurrentWar, result2 error) {
	fake.getWarMutex.Lock()
	defer fake.getWarMutex.Unlock()
	fake.GetWarStub = nil
	fake.getWarReturns = struct {
		result1 clash.CurrentWar
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetWarReturnsOnCall(i int, result1 clash.CurrentWar, result2 error) {
	fake.getWarMutex.Lock()
	defer fake.getWarMutex.Unlock()
	fake.GetWarStub = nil
	if fake.getWarReturnsOnCall == nil {
		fake.getWarReturnsOnCall = make(map[int]struct {
			result1 clash.CurrentWar
			result2 error
		})
	}
	fake.getWarReturnsOnCall[i] = struct {
		result1 clash.CurrentWar
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkForAttackUpdatesMutex.RLock()
	defer fake.checkForAttackUpdatesMutex.RUnlock()
	fake.getClanMutex.RLock()
	defer fake.getClanMutex.RUnlock()
	fake.getOpponentMapPositionMutex.RLock()
	defer fake.getOpponentMapPositionMutex.RUnlock()
	fake.getWarMutex.RLock()
	defer fake.getWarMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clash.Client = new(FakeClient)
